{"version":3,"sources":["replacement/9","replacement/7","src/common/parseHex.js","src/renderer/color.js","src/common/global.umd.js","src/common/configuration.js","src/common/dom.js","src/common/observer.js","src/renderer/point.js","src/renderer/transform.js","src/renderer/graphics.js","replacement/1","src/renderer/shapes.js","src/renderer/colorTheme.js","src/renderer/iconGenerator.js","src/common/sha1.js","src/common/hashUtils.js","src/renderer/canvas/canvasRenderer.js","replacement/2","src/apis/drawIcon.js","src/renderer/svg/svgPath.js","replacement/3","src/renderer/svg/svgRenderer.js","replacement/4","src/renderer/svg/constants.js","src/renderer/svg/svgWriter.js","replacement/5","src/apis/toSvg.js","src/renderer/svg/svgElement.js","replacement/6","src/apis/update.js","src/apis/jquery.js","src/browser-umd.js","replacement/8"],"names":["umdGlobal","factory","jdenticon","parseHex","hash","startPosition","octets","parseInt","substr","decToHex","v","toString","hueToRgb","m1","m2","h","parseColor","color","test","let","result","colorLength","length","const","r","g","b","a","toCss3Color","hexColor","isNaN","toFixed","hsl","hue","saturation","lightness","partialHex","correctedHsl","corrector","GLOBAL","CONFIG_PROPERTIES","MODULE","rootConfigurationHolder","defineConfigProperty","rootObject","configure","newConfiguration","arguments","getConfiguration","paddingOrLocalConfig","defaultPadding","configObject","lightnessConfig","colorSaturation","grayscaleSaturation","backColor","padding","configName","defaultRange","range","value","hueFunction","originalHue","hueConfig","colorLightness","grayscaleLightness","iconPadding","ICON_TYPE_SVG","ICON_TYPE_CANVAS","ATTRIBUTES","HASH","VALUE","ICON_SELECTOR","documentQuerySelectorAll","document","querySelectorAll","bind","getIdenticonType","el","tagName","observer","updateCallback","MutationObserver","mutations","mutationIndex","mutation","addedNodes","addedNodeIndex","addedNode","nodeType","icons","iconIndex","type","target","observe","body","childList","attributes","attributeFilter","subtree","Point","x","y","this","Transform","size","rotation","_x","_y","_size","_rotation","prototype","transformIconPoint","w","right","bottom","NO_TRANSFORM","Graphics","renderer","_renderer","currentTransform","Graphics__prototype","centerShape","index","cell","positionIndex","k","m","inner","outer","addTriangle","addRectangle","addCircle","addPolygon","addRhombus","outerShape","colorTheme","config","iconGenerator","parsedConfig","setBackground","iconSize","graphics","renderShape","colorIndex","shapes","rotationIndex","positions","shapeIndex","beginShape","availableColors","selectedColorIndexes","i","endShape","isDuplicate","values","indexOf","push","finish","sha1","message","dataSize","HASH_SIZE_HALF_BYTES","BLOCK_SIZE_WORDS","f","urlEncodedMessage","encodeURI","data","hashBuffer","c","d","e","blockStartIndex","hexHash","rotl","shift","substring","charCodeAt","isValidHash","hashCandidate","computeHash","CanvasRenderer","ctx","canvas","width","height","save","Math","min","translate","_ctx","clearRect","points","invert","di","transformedPoints","p","splice","CanvasRenderer__prototype","drawIcon","hashOrValue","Error","svgValue","SvgPath","dataString","fillColor","fillStyle","fillRect","beginPath","fill","moveTo","lineTo","closePath","point","diameter","counterClockwise","radius","arc","PI","restore","SvgPath__prototype","SvgRenderer","_path","_pathsByColor","_target","sweepFlag","svgRadius","svgDiameter","svgArc","SvgRenderer__prototype","match","exec","opacity","pathsByColor","hasOwnProperty","this$1","appendPath","SVG_CONSTANTS","XMLNS","WIDTH","HEIGHT","SvgWriter","_s","SvgWriter__prototype","toSvg","writer","SvgElement_append","parentNode","name","createElementNS","keyValuePairs","setAttribute","appendChild","SvgElement","element","Number","getAttribute","_el","firstChild","removeChild","SvgElement__prototype","updateAll","update","renderDomElement","iconType","getContext","rendererFactory","hasAttribute","elements","jdenticonJqueryPlugin","jQuery","jdenticonStartup","replaceMode","setTimeout","module","define","self"],"mappings":"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","file":"jdenticon.min.js","sourcesContent":["// Jdenticon 3.2.0 | jdenticon.com | MIT licensed | (c) 2014-2022 Daniel Mester Pirttijärvi\r\n","/**\r\n * Jdenticon 3.2.0\r\n * http://jdenticon.com\r\n *  \r\n * Built: 2022-08-07T11:23:11.640Z\r\n *\r\n * MIT License\r\n * \r\n * Copyright (c) 2014-2021 Daniel Mester Pirttijärvi\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n(function (umdGlobal, factory) {\r\n    var jdenticon = factory(umdGlobal);\r\n\r\n    // Node.js\r\n    if (typeof module !== \"undefined\" && \"exports\" in module) {\r\n        module[\"exports\"] = jdenticon;\r\n    }\r\n    // RequireJS\r\n    else if (typeof define === \"function\" && define[\"amd\"]) {\r\n        define([], function () { return jdenticon; });\r\n    }\r\n    // No module loader\r\n    else {\r\n        umdGlobal[\"jdenticon\"] = jdenticon;\r\n    }\r\n})(typeof self !== \"undefined\" ? self : this, function (umdGlobal) {\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Parses a substring of the hash as a number.\r\n * @param {number} startPosition \r\n * @param {number=} octets\r\n */\r\nexport function parseHex(hash, startPosition, octets) {\r\n    return parseInt(hash.substr(startPosition, octets), 16);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { parseHex } from \"../common/parseHex\";\r\n\r\nfunction decToHex(v) {\r\n    v |= 0; // Ensure integer value\r\n    return v < 0 ? \"00\" :\r\n        v < 16 ? \"0\" + v.toString(16) :\r\n        v < 256 ? v.toString(16) :\r\n        \"ff\";\r\n}\r\n\r\nfunction hueToRgb(m1, m2, h) {\r\n    h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;\r\n    return decToHex(255 * (\r\n        h < 1 ? m1 + (m2 - m1) * h :\r\n        h < 3 ? m2 :\r\n        h < 4 ? m1 + (m2 - m1) * (4 - h) :\r\n        m1));\r\n}\r\n\r\n/**\r\n * @param {number} r Red channel [0, 255]\r\n * @param {number} g Green channel [0, 255]\r\n * @param {number} b Blue channel [0, 255]\r\n */\r\nexport function rgb(r, g, b) {\r\n    return \"#\" + decToHex(r) + decToHex(g) + decToHex(b);\r\n}\r\n\r\n/**\r\n * @param {string} color  Color value to parse. Currently hexadecimal strings on the format #rgb[a] and #rrggbb[aa] are supported.\r\n * @returns {string}\r\n */\r\nexport function parseColor(color) {\r\n    if (/^#[0-9a-f]{3,8}$/i.test(color)) {\r\n        let result;\r\n        const colorLength = color.length;\r\n\r\n        if (colorLength < 6) {\r\n            const r = color[1],\r\n                  g = color[2],\r\n                  b = color[3],\r\n                  a = color[4] || \"\";\r\n            result = \"#\" + r + r + g + g + b + b + a + a;\r\n        }\r\n        if (colorLength == 7 || colorLength > 8) {\r\n            result = color;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a hexadecimal color to a CSS3 compatible color.\r\n * @param {string} hexColor  Color on the format \"#RRGGBB\" or \"#RRGGBBAA\"\r\n * @returns {string}\r\n */\r\nexport function toCss3Color(hexColor) {\r\n    const a = parseHex(hexColor, 7, 2);\r\n    let result;\r\n\r\n    if (isNaN(a)) {\r\n        result = hexColor;\r\n    } else {\r\n        const r = parseHex(hexColor, 1, 2),\r\n            g = parseHex(hexColor, 3, 2),\r\n            b = parseHex(hexColor, 5, 2);\r\n        result = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + (a / 255).toFixed(2) + \")\";\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Converts an HSL color to a hexadecimal RGB color.\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\r\nexport function hsl(hue, saturation, lightness) {\r\n    // Based on http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\r\n    let result;\r\n\r\n    if (saturation == 0) {\r\n        const partialHex = decToHex(lightness * 255);\r\n        result = partialHex + partialHex + partialHex;\r\n    }\r\n    else {\r\n        const m2 = lightness <= 0.5 ? lightness * (saturation + 1) : lightness + saturation - lightness * saturation,\r\n              m1 = lightness * 2 - m2;\r\n        result =\r\n            hueToRgb(m1, m2, hue * 6 + 2) +\r\n            hueToRgb(m1, m2, hue * 6) +\r\n            hueToRgb(m1, m2, hue * 6 - 2);\r\n    }\r\n\r\n    return \"#\" + result;\r\n}\r\n\r\n/**\r\n * Converts an HSL color to a hexadecimal RGB color. This function will correct the lightness for the \"dark\" hues\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\r\nexport function correctedHsl(hue, saturation, lightness) {\r\n    // The corrector specifies the perceived middle lightness for each hue\r\n    const correctors = [ 0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55 ],\r\n          corrector = correctors[(hue * 6 + 0.5) | 0];\r\n    \r\n    // Adjust the input lightness relative to the corrector\r\n    lightness = lightness < 0.5 ? lightness * corrector * 2 : corrector + (lightness - 0.5) * (1 - corrector) * 2;\r\n    \r\n    return hsl(hue, saturation, lightness);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n/* global umdGlobal */\r\n\r\n// In the future we can replace `GLOBAL` with `globalThis`, but for now use the old school global detection for\r\n// backward compatibility.\r\nexport const GLOBAL = umdGlobal;\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { parseColor } from \"../renderer/color\";\r\nimport { GLOBAL } from \"./global\";\r\n\r\n/**\r\n * @typedef {Object} ParsedConfiguration\r\n * @property {number} colorSaturation\r\n * @property {number} grayscaleSaturation\r\n * @property {string} backColor\r\n * @property {number} iconPadding\r\n * @property {function(number):number} hue\r\n * @property {function(number):number} colorLightness\r\n * @property {function(number):number} grayscaleLightness\r\n */\r\n\r\nexport const CONFIG_PROPERTIES = {\r\n    GLOBAL: \"jdenticon_config\",\r\n    MODULE: \"config\",\r\n};\r\n\r\nvar rootConfigurationHolder = {};\r\n\r\n/**\r\n * Defines the deprecated `config` property on the root Jdenticon object. When the property is set a warning is \r\n * printed in the console. To minimize bundle size, this is only used in Node bundles.\r\n * @param {!Object} rootObject \r\n */\r\nexport function defineConfigPropertyWithWarn(rootObject) {\r\n    Object.defineProperty(rootObject, CONFIG_PROPERTIES.MODULE, {\r\n        configurable: true,\r\n        get: () => rootConfigurationHolder[CONFIG_PROPERTIES.MODULE],\r\n        set: newConfiguration => {\r\n            rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] = newConfiguration;\r\n            console.warn(\"jdenticon.config is deprecated. Use jdenticon.configure() instead.\");\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Defines the deprecated `config` property on the root Jdenticon object without printing a warning in the console\r\n * when it is being used.\r\n * @param {!Object} rootObject \r\n */\r\nexport function defineConfigProperty(rootObject) {\r\n    rootConfigurationHolder = rootObject;\r\n}\r\n\r\n/**\r\n * Sets a new icon style configuration. The new configuration is not merged with the previous one. * \r\n * @param {Object} newConfiguration - New configuration object.\r\n */\r\nexport function configure(newConfiguration) {\r\n    if (arguments.length) {\r\n        rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] = newConfiguration;\r\n    }\r\n    return rootConfigurationHolder[CONFIG_PROPERTIES.MODULE];\r\n}\r\n\r\n/**\r\n * Gets the normalized current Jdenticon color configuration. Missing fields have default values.\r\n * @param {Object|number|undefined} paddingOrLocalConfig - Configuration passed to the called API method. A\r\n *    local configuration overrides the global configuration in it entirety. This parameter can for backward\r\n *    compatibility also contain a padding value. A padding value only overrides the global padding, not the\r\n *    entire global configuration.\r\n * @param {number} defaultPadding - Padding used if no padding is specified in neither the configuration nor\r\n *    explicitly to the API method.\r\n * @returns {ParsedConfiguration}\r\n */\r\nexport function getConfiguration(paddingOrLocalConfig, defaultPadding) {\r\n    const configObject = \r\n            typeof paddingOrLocalConfig == \"object\" && paddingOrLocalConfig ||\r\n            rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] ||\r\n            GLOBAL[CONFIG_PROPERTIES.GLOBAL] ||\r\n            { },\r\n\r\n        lightnessConfig = configObject[\"lightness\"] || { },\r\n        \r\n        // In versions < 2.1.0 there was no grayscale saturation -\r\n        // saturation was the color saturation.\r\n        saturation = configObject[\"saturation\"] || { },\r\n        colorSaturation = \"color\" in saturation ? saturation[\"color\"] : saturation,\r\n        grayscaleSaturation = saturation[\"grayscale\"],\r\n\r\n        backColor = configObject[\"backColor\"],\r\n        padding = configObject[\"padding\"];\r\n    \r\n    /**\r\n     * Creates a lightness range.\r\n     */\r\n    function lightness(configName, defaultRange) {\r\n        let range = lightnessConfig[configName];\r\n        \r\n        // Check if the lightness range is an array-like object. This way we ensure the\r\n        // array contain two values at the same time.\r\n        if (!(range && range.length > 1)) {\r\n            range = defaultRange;\r\n        }\r\n\r\n        /**\r\n         * Gets a lightness relative the specified value in the specified lightness range.\r\n         */\r\n        return function (value) {\r\n            value = range[0] + value * (range[1] - range[0]);\r\n            return value < 0 ? 0 : value > 1 ? 1 : value;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a hue allowed by the configured hue restriction,\r\n     * provided the originally computed hue.\r\n     */\r\n    function hueFunction(originalHue) {\r\n        const hueConfig = configObject[\"hues\"];\r\n        let hue;\r\n        \r\n        // Check if 'hues' is an array-like object. This way we also ensure that\r\n        // the array is not empty, which would mean no hue restriction.\r\n        if (hueConfig && hueConfig.length > 0) {\r\n            // originalHue is in the range [0, 1]\r\n            // Multiply with 0.999 to change the range to [0, 1) and then truncate the index.\r\n            hue = hueConfig[0 | (0.999 * originalHue * hueConfig.length)];\r\n        }\r\n\r\n        return typeof hue == \"number\" ?\r\n            \r\n            // A hue was specified. We need to convert the hue from\r\n            // degrees on any turn - e.g. 746° is a perfectly valid hue -\r\n            // to turns in the range [0, 1).\r\n            ((((hue / 360) % 1) + 1) % 1) :\r\n\r\n            // No hue configured => use original hue\r\n            originalHue;\r\n    }\r\n        \r\n    return {\r\n        hue: hueFunction,\r\n        colorSaturation: typeof colorSaturation == \"number\" ? colorSaturation : 0.5,\r\n        grayscaleSaturation: typeof grayscaleSaturation == \"number\" ? grayscaleSaturation : 0,\r\n        colorLightness: lightness(\"color\", [0.4, 0.8]),\r\n        grayscaleLightness: lightness(\"grayscale\", [0.3, 0.9]),\r\n        backColor: parseColor(backColor),\r\n        iconPadding: \r\n            typeof paddingOrLocalConfig == \"number\" ? paddingOrLocalConfig : \r\n            typeof padding == \"number\" ? padding : \r\n            defaultPadding\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nexport const ICON_TYPE_SVG = 1;\r\n\r\nexport const ICON_TYPE_CANVAS = 2;\r\n\r\nexport const ATTRIBUTES = {\r\n    HASH: \"data-jdenticon-hash\",\r\n    VALUE: \"data-jdenticon-value\"\r\n};\r\n\r\nexport const ICON_SELECTOR = \"[\" + ATTRIBUTES.HASH +\"],[\" + ATTRIBUTES.VALUE +\"]\";\r\n\r\nexport const documentQuerySelectorAll = /** @type {!Function} */ (\r\n    typeof document !== \"undefined\" && document.querySelectorAll.bind(document));\r\n\r\nexport function getIdenticonType(el) {\r\n    if (el) {\r\n        const tagName = el[\"tagName\"];\r\n\r\n        if (/^svg$/i.test(tagName)) {\r\n            return ICON_TYPE_SVG;\r\n        }\r\n\r\n        if (/^canvas$/i.test(tagName) && \"getContext\" in el) {\r\n            return ICON_TYPE_CANVAS;\r\n        }\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { ATTRIBUTES, ICON_SELECTOR, getIdenticonType } from \"./dom\";\r\n\r\nexport function observer(updateCallback) {\r\n    if (typeof MutationObserver != \"undefined\") {\r\n        const mutationObserver = new MutationObserver(function onmutation(mutations) {\r\n            for (let mutationIndex = 0; mutationIndex < mutations.length; mutationIndex++) {\r\n                const mutation = mutations[mutationIndex];\r\n                const addedNodes = mutation.addedNodes;\r\n        \r\n                for (let addedNodeIndex = 0; addedNodes && addedNodeIndex < addedNodes.length; addedNodeIndex++) {\r\n                    const addedNode = addedNodes[addedNodeIndex];\r\n        \r\n                    // Skip other types of nodes than element nodes, since they might not support\r\n                    // the querySelectorAll method => runtime error.\r\n                    if (addedNode.nodeType == Node.ELEMENT_NODE) {\r\n                        if (getIdenticonType(addedNode)) {\r\n                            updateCallback(addedNode);\r\n                        }\r\n                        else {\r\n                            const icons = /** @type {Element} */(addedNode).querySelectorAll(ICON_SELECTOR);\r\n                            for (let iconIndex = 0; iconIndex < icons.length; iconIndex++) {\r\n                                updateCallback(icons[iconIndex]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (mutation.type == \"attributes\" && getIdenticonType(mutation.target)) {\r\n                    updateCallback(mutation.target);\r\n                }\r\n            }\r\n        });\r\n\r\n        mutationObserver.observe(document.body, {\r\n            \"childList\": true,\r\n            \"attributes\": true,\r\n            \"attributeFilter\": [ATTRIBUTES.VALUE, ATTRIBUTES.HASH, \"width\", \"height\"],\r\n            \"subtree\": true,\r\n        });\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Represents a point.\r\n */\r\nexport class Point {\r\n    /**\r\n     * @param {number} x \r\n     * @param {number} y \r\n     */\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { Point } from \"./point\";\r\n\r\n/**\r\n * Translates and rotates a point before being passed on to the canvas context. This was previously done by the canvas context itself, \r\n * but this caused a rendering issue in Chrome on sizes > 256 where the rotation transformation of inverted paths was not done properly.\r\n */\r\nexport class Transform {\r\n    /**\r\n     * @param {number} x The x-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} size The size of the transformed rectangle.\r\n     * @param {number} rotation Rotation specified as 0 = 0 rad, 1 = 0.5π rad, 2 = π rad, 3 = 1.5π rad\r\n     */\r\n    constructor(x, y, size, rotation) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._size = size;\r\n        this._rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * Transforms the specified point based on the translation and rotation specification for this Transform.\r\n     * @param {number} x x-coordinate\r\n     * @param {number} y y-coordinate\r\n     * @param {number=} w The width of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     * @param {number=} h The height of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     */\r\n    transformIconPoint(x, y, w, h) {\r\n        const right = this._x + this._size,\r\n              bottom = this._y + this._size,\r\n              rotation = this._rotation;\r\n        return rotation === 1 ? new Point(right - y - (h || 0), this._y + x) :\r\n               rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) :\r\n               rotation === 3 ? new Point(this._x + y, bottom - x - (w || 0)) :\r\n               new Point(this._x + x, this._y + y);\r\n    }\r\n}\r\n\r\nexport const NO_TRANSFORM = new Transform(0, 0, 0, 0);\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { NO_TRANSFORM } from \"./transform\";\r\n\r\n/**\r\n * @typedef {import(\"./renderer\").Renderer} Renderer\r\n * @typedef {import(\"./transform\").Transform} Transform\r\n */\r\n\r\n/**\r\n * Provides helper functions for rendering common basic shapes.\r\n */\r\nexport class Graphics {\r\n    /**\r\n     * @param {Renderer} renderer \r\n     */\r\n    constructor(renderer) {\r\n        /**\r\n         * @type {Renderer}\r\n         * @private\r\n         */\r\n        this._renderer = renderer;\r\n\r\n        /**\r\n         * @type {Transform}\r\n         */\r\n        this.currentTransform = NO_TRANSFORM;\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * @param {Array<number>} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]\r\n     * @param {boolean=} invert Specifies if the polygon will be inverted.\r\n     */\r\n    addPolygon(points, invert) {\r\n        const di = invert ? -2 : 2,\r\n              transformedPoints = [];\r\n        \r\n        for (let i = invert ? points.length - 2 : 0; i < points.length && i >= 0; i += di) {\r\n            transformedPoints.push(this.currentTransform.transformIconPoint(points[i], points[i + 1]));\r\n        }\r\n        \r\n        this._renderer.addPolygon(transformedPoints);\r\n    }\r\n    \r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * Source: http://stackoverflow.com/a/2173084\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} size The size of the ellipse.\r\n     * @param {boolean=} invert Specifies if the ellipse will be inverted.\r\n     */\r\n    addCircle(x, y, size, invert) {\r\n        const p = this.currentTransform.transformIconPoint(x, y, size, size);\r\n        this._renderer.addCircle(p, size, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rectangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} w The width of the rectangle.\r\n     * @param {number} h The height of the rectangle.\r\n     * @param {boolean=} invert Specifies if the rectangle will be inverted.\r\n     */\r\n    addRectangle(x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x, y, \r\n            x + w, y,\r\n            x + w, y + h,\r\n            x, y + h\r\n        ], invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a right triangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} w The width of the triangle.\r\n     * @param {number} h The height of the triangle.\r\n     * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.\r\n     * @param {boolean=} invert Specifies if the triangle will be inverted.\r\n     */\r\n    addTriangle(x, y, w, h, r, invert) {\r\n        const points = [\r\n            x + w, y, \r\n            x + w, y + h, \r\n            x, y + h,\r\n            x, y\r\n        ];\r\n        points.splice(((r || 0) % 4) * 2, 2);\r\n        this.addPolygon(points, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rhombus to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} w The width of the rhombus.\r\n     * @param {number} h The height of the rhombus.\r\n     * @param {boolean=} invert Specifies if the rhombus will be inverted.\r\n     */\r\n    addRhombus(x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x + w / 2, y,\r\n            x + w, y + h / 2,\r\n            x + w / 2, y + h,\r\n            x, y + h / 2\r\n        ], invert);\r\n    }\r\n}","\r\nvar Graphics__prototype = Graphics.prototype;","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n * @param {number} positionIndex\r\n * @typedef {import('./graphics').Graphics} Graphics\r\n */\r\nexport function centerShape(index, g, cell, positionIndex) {\r\n    index = index % 14;\r\n\r\n    let k, m, w, h, inner, outer;\r\n\r\n    !index ? (\r\n        k = cell * 0.42,\r\n        g.addPolygon([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell - k * 2,\r\n            cell - k, cell,\r\n            0, cell\r\n        ])) :\r\n\r\n    index == 1 ? (\r\n        w = 0 | (cell * 0.5), \r\n        h = 0 | (cell * 0.8),\r\n\r\n        g.addTriangle(cell - w, 0, w, h, 2)) :\r\n\r\n    index == 2 ? (\r\n        w = 0 | (cell / 3),\r\n        g.addRectangle(w, w, cell - w, cell - w)) :\r\n\r\n    index == 3 ? (\r\n        inner = cell * 0.1,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 6 ? 1 :\r\n            cell < 8 ? 2 :\r\n            (0 | (cell * 0.25)),\r\n        \r\n        inner = \r\n            inner > 1 ? (0 | inner) : // large icon => truncate decimals\r\n            inner > 0.5 ? 1 :         // medium size icon => fixed width\r\n            inner,                    // small icon => anti-aliased border\r\n\r\n        g.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer)) :\r\n\r\n    index == 4 ? (\r\n        m = 0 | (cell * 0.15),\r\n        w = 0 | (cell * 0.5),\r\n        g.addCircle(cell - w - m, cell - w - m, w)) :\r\n\r\n    index == 5 ? (\r\n        inner = cell * 0.1,\r\n        outer = inner * 4,\r\n\r\n        // Align edge to nearest pixel in large icons\r\n        outer > 3 && (outer = 0 | outer),\r\n        \r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addPolygon([\r\n            outer, outer,\r\n            cell - inner, outer,\r\n            outer + (cell - outer - inner) / 2, cell - inner\r\n        ], true)) :\r\n\r\n    index == 6 ? \r\n        g.addPolygon([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell * 0.7,\r\n            cell * 0.4, cell * 0.4,\r\n            cell * 0.7, cell,\r\n            0, cell\r\n        ]) :\r\n\r\n    index == 7 ? \r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 8 ? (\r\n        g.addRectangle(0, 0, cell, cell / 2),\r\n        g.addRectangle(0, cell / 2, cell / 2, cell / 2),\r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1)) :\r\n\r\n    index == 9 ? (\r\n        inner = cell * 0.14,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 4 ? 1 :\r\n            cell < 6 ? 2 :\r\n            (0 | (cell * 0.35)),\r\n\r\n        inner = \r\n            cell < 8 ? inner : // small icon => anti-aliased border\r\n            (0 | inner),       // large icon => truncate decimals\r\n\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true)) :\r\n\r\n    index == 10 ? (\r\n        inner = cell * 0.12,\r\n        outer = inner * 3,\r\n\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addCircle(outer, outer, cell - inner - outer, true)) :\r\n\r\n    index == 11 ? \r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 12 ? (\r\n        m = cell * 0.25,\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addRhombus(m, m, cell - m, cell - m, true)) :\r\n\r\n    // 13\r\n    (\r\n        !positionIndex && (\r\n            m = cell * 0.4, w = cell * 1.2,\r\n            g.addCircle(m, m, w)\r\n        )\r\n    );\r\n}\r\n\r\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n */\r\nexport function outerShape(index, g, cell) {\r\n    index = index % 4;\r\n\r\n    let m;\r\n\r\n    !index ?\r\n        g.addTriangle(0, 0, cell, cell, 0) :\r\n        \r\n    index == 1 ?\r\n        g.addTriangle(0, cell / 2, cell, cell / 2, 0) :\r\n\r\n    index == 2 ?\r\n        g.addRhombus(0, 0, cell, cell) :\r\n\r\n    // 3\r\n    (\r\n        m = cell / 6,\r\n        g.addCircle(m, m, cell - 2 * m)\r\n    );\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { correctedHsl } from \"./color\";\r\n\r\n/**\r\n * Gets a set of identicon color candidates for a specified hue and config.\r\n * @param {number} hue\r\n * @param {import(\"../common/configuration\").ParsedConfiguration} config\r\n */\r\nexport function colorTheme(hue, config) {\r\n    hue = config.hue(hue);\r\n    return [\r\n        // Dark gray\r\n        correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(0)),\r\n        // Mid color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(0.5)),\r\n        // Light gray\r\n        correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(1)),\r\n        // Light color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(1)),\r\n        // Dark color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(0))\r\n    ];\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { Transform } from \"./transform\";\r\nimport { Graphics } from \"./graphics\";\r\nimport { centerShape, outerShape } from \"./shapes\";\r\nimport { colorTheme } from \"./colorTheme\";\r\nimport { parseHex } from \"../common/parseHex\";\r\nimport { getConfiguration } from \"../common/configuration\";\r\n     \r\n/**\r\n * Draws an identicon to a specified renderer.\r\n * @param {import('./renderer').Renderer} renderer\r\n * @param {string} hash\r\n * @param {Object|number=} config\r\n */\r\nexport function iconGenerator(renderer, hash, config) {\r\n    const parsedConfig = getConfiguration(config, 0.08);\r\n\r\n    // Set background color\r\n    if (parsedConfig.backColor) {\r\n        renderer.setBackground(parsedConfig.backColor);\r\n    }\r\n    \r\n    // Calculate padding and round to nearest integer\r\n    let size = renderer.iconSize;\r\n    const padding = (0.5 + size * parsedConfig.iconPadding) | 0;\r\n    size -= padding * 2;\r\n    \r\n    const graphics = new Graphics(renderer);\r\n    \r\n    // Calculate cell size and ensure it is an integer\r\n    const cell = 0 | (size / 4);\r\n    \r\n    // Since the cell size is integer based, the actual icon will be slightly smaller than specified => center icon\r\n    const x = 0 | (padding + size / 2 - cell * 2);\r\n    const y = 0 | (padding + size / 2 - cell * 2);\r\n\r\n    function renderShape(colorIndex, shapes, index, rotationIndex, positions) {\r\n        const shapeIndex = parseHex(hash, index, 1);\r\n        let r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0;\r\n        \r\n        renderer.beginShape(availableColors[selectedColorIndexes[colorIndex]]);\r\n        \r\n        for (let i = 0; i < positions.length; i++) {\r\n            graphics.currentTransform = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);\r\n            shapes(shapeIndex, graphics, cell, i);\r\n        }\r\n        \r\n        renderer.endShape();\r\n    }\r\n\r\n    // AVAILABLE COLORS\r\n    const hue = parseHex(hash, -7) / 0xfffffff,\r\n    \r\n          // Available colors for this icon\r\n          availableColors = colorTheme(hue, parsedConfig),\r\n\r\n          // The index of the selected colors\r\n          selectedColorIndexes = [];\r\n\r\n    let index;\r\n\r\n    function isDuplicate(values) {\r\n        if (values.indexOf(index) >= 0) {\r\n            for (let i = 0; i < values.length; i++) {\r\n                if (selectedColorIndexes.indexOf(values[i]) >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        index = parseHex(hash, 8 + i, 1) % availableColors.length;\r\n        if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo\r\n            isDuplicate([2, 3])) { // Disallow light gray and light color combo\r\n            index = 1;\r\n        }\r\n        selectedColorIndexes.push(index);\r\n    }\r\n\r\n    // ACTUAL RENDERING\r\n    // Sides\r\n    renderShape(0, outerShape, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);\r\n    // Corners\r\n    renderShape(1, outerShape, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);\r\n    // Center\r\n    renderShape(2, centerShape, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);\r\n    \r\n    renderer.finish();\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Computes a SHA1 hash for any value and returns it as a hexadecimal string.\r\n * \r\n * This function is optimized for minimal code size and rather short messages.\r\n * \r\n * @param {string} message \r\n */\r\nexport function sha1(message) {\r\n    const HASH_SIZE_HALF_BYTES = 40;\r\n    const BLOCK_SIZE_WORDS = 16;\r\n\r\n    // Variables\r\n    // `var` is used to be able to minimize the number of `var` keywords.\r\n    var i = 0,\r\n        f = 0,\r\n    \r\n        // Use `encodeURI` to UTF8 encode the message without any additional libraries\r\n        // We could use `unescape` + `encodeURI` to minimize the code, but that would be slightly risky\r\n        // since `unescape` is deprecated.\r\n        urlEncodedMessage = encodeURI(message) + \"%80\", // trailing '1' bit padding\r\n        \r\n        // This can be changed to a preallocated Uint32Array array for greater performance and larger code size\r\n        data = [],\r\n        dataSize,\r\n        \r\n        hashBuffer = [],\r\n\r\n        a = 0x67452301,\r\n        b = 0xefcdab89,\r\n        c = ~a,\r\n        d = ~b,\r\n        e = 0xc3d2e1f0,\r\n        hash = [a, b, c, d, e],\r\n\r\n        blockStartIndex = 0,\r\n        hexHash = \"\";\r\n\r\n    /**\r\n     * Rotates the value a specified number of bits to the left.\r\n     * @param {number} value  Value to rotate\r\n     * @param {number} shift  Bit count to shift.\r\n     */\r\n    function rotl(value, shift) {\r\n        return (value << shift) | (value >>> (32 - shift));\r\n    }\r\n\r\n    // Message data\r\n    for ( ; i < urlEncodedMessage.length; f++) {\r\n        data[f >> 2] = data[f >> 2] |\r\n            (\r\n                (\r\n                    urlEncodedMessage[i] == \"%\"\r\n                        // Percent encoded byte\r\n                        ? parseInt(urlEncodedMessage.substring(i + 1, i += 3), 16)\r\n                        // Unencoded byte\r\n                        : urlEncodedMessage.charCodeAt(i++)\r\n                )\r\n\r\n                // Read bytes in reverse order (big endian words)\r\n                << ((3 - (f & 3)) * 8)\r\n            );\r\n    }\r\n\r\n    // f is now the length of the utf8 encoded message\r\n    // 7 = 8 bytes (64 bit) for message size, -1 to round down\r\n    // >> 6 = integer division with block size\r\n    dataSize = (((f + 7) >> 6) + 1) * BLOCK_SIZE_WORDS;\r\n\r\n    // Message size in bits.\r\n    // SHA1 uses a 64 bit integer to represent the size, but since we only support short messages only the least\r\n    // significant 32 bits are set. -8 is for the '1' bit padding byte.\r\n    data[dataSize - 1] = f * 8 - 8;\r\n    \r\n    // Compute hash\r\n    for ( ; blockStartIndex < dataSize; blockStartIndex += BLOCK_SIZE_WORDS) {\r\n        for (i = 0; i < 80; i++) {\r\n            f = rotl(a, 5) + e + (\r\n                    // Ch\r\n                    i < 20 ? ((b & c) ^ ((~b) & d)) + 0x5a827999 :\r\n                    \r\n                    // Parity\r\n                    i < 40 ? (b ^ c ^ d) + 0x6ed9eba1 :\r\n                    \r\n                    // Maj\r\n                    i < 60 ? ((b & c) ^ (b & d) ^ (c & d)) + 0x8f1bbcdc :\r\n                    \r\n                    // Parity\r\n                    (b ^ c ^ d) + 0xca62c1d6\r\n                ) + ( \r\n                    hashBuffer[i] = i < BLOCK_SIZE_WORDS\r\n                        // Bitwise OR is used to coerse `undefined` to 0\r\n                        ? (data[blockStartIndex + i] | 0)\r\n                        : rotl(hashBuffer[i - 3] ^ hashBuffer[i - 8] ^ hashBuffer[i - 14] ^ hashBuffer[i - 16], 1)\r\n                );\r\n\r\n            e = d;\r\n            d = c;\r\n            c = rotl(b, 30);\r\n            b = a;\r\n            a = f;\r\n        }\r\n\r\n        hash[0] = a = ((hash[0] + a) | 0);\r\n        hash[1] = b = ((hash[1] + b) | 0);\r\n        hash[2] = c = ((hash[2] + c) | 0);\r\n        hash[3] = d = ((hash[3] + d) | 0);\r\n        hash[4] = e = ((hash[4] + e) | 0);\r\n    }\r\n\r\n    // Format hex hash\r\n    for (i = 0; i < HASH_SIZE_HALF_BYTES; i++) {\r\n        hexHash += (\r\n            (\r\n                // Get word (2^3 half-bytes per word)\r\n                hash[i >> 3] >>>\r\n\r\n                // Append half-bytes in reverse order\r\n                ((7 - (i & 7)) * 4)\r\n            ) \r\n            // Clamp to half-byte\r\n            & 0xf\r\n        ).toString(16);\r\n    }\r\n\r\n    return hexHash;\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { sha1 } from \"./sha1\";\r\n\r\n/**\r\n * Inputs a value that might be a valid hash string for Jdenticon and returns it \r\n * if it is determined valid, otherwise a falsy value is returned.\r\n */\r\nexport function isValidHash(hashCandidate) {\r\n    return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;\r\n}\r\n\r\n/**\r\n * Computes a hash for the specified value. Currently SHA1 is used. This function\r\n * always returns a valid hash.\r\n */\r\nexport function computeHash(value) {\r\n    return sha1(value == null ? \"\" : \"\" + value);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { toCss3Color } from \"../color\";\r\n\r\n/**\r\n * @typedef {import(\"../renderer\").Renderer} Renderer\r\n * @typedef {import('../point').Point} Point\r\n */\r\n\r\n/**\r\n * Renderer redirecting drawing commands to a canvas context.\r\n * @implements {Renderer}\r\n */\r\nexport class CanvasRenderer {\r\n    /**\r\n     * @param {number=} iconSize\r\n     */\r\n    constructor(ctx, iconSize) {\r\n        const canvas = ctx.canvas; \r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        \r\n        ctx.save();\r\n        \r\n        if (!iconSize) {\r\n            iconSize = Math.min(width, height);\r\n            \r\n            ctx.translate(\r\n                ((width - iconSize) / 2) | 0,\r\n                ((height - iconSize) / 2) | 0);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this._ctx = ctx;\r\n        this.iconSize = iconSize;\r\n        \r\n        ctx.clearRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground(fillColor) {\r\n        const ctx = this._ctx;\r\n        const iconSize = this.iconSize;\r\n\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.fillRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} fillColor Fill color on format #rrggbb[aa].\r\n     */\r\n    beginShape(fillColor) {\r\n        const ctx = this._ctx;\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.beginPath();\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape. This causes the queued paths to be rendered on the canvas.\r\n     */\r\n    endShape() {\r\n        this._ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the rendering queue.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        const ctx = this._ctx;\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Adds a circle to the rendering queue.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        const ctx = this._ctx,\r\n              radius = diameter / 2;\r\n        ctx.moveTo(point.x + radius, point.y + radius);\r\n        ctx.arc(point.x + radius, point.y + radius, radius, 0, Math.PI * 2, counterClockwise);\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() {\r\n        this._ctx.restore();\r\n    }\r\n}\r\n","\r\nvar CanvasRenderer__prototype = CanvasRenderer.prototype;","import { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { CanvasRenderer } from \"../renderer/canvas/canvasRenderer\";\r\n\r\n/**\r\n * Draws an identicon to a context.\r\n * @param {CanvasRenderingContext2D} ctx - Canvas context on which the icon will be drawn at location (0, 0).\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function drawIcon(ctx, hashOrValue, size, config) {\r\n    if (!ctx) {\r\n        throw new Error(\"No canvas specified.\");\r\n    }\r\n    \r\n    iconGenerator(new CanvasRenderer(ctx, size), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue), \r\n        config);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Prepares a measure to be used as a measure in an SVG path, by\r\n * rounding the measure to a single decimal. This reduces the file\r\n * size of the generated SVG with more than 50% in some cases.\r\n */\r\nfunction svgValue(value) {\r\n    return ((value * 10 + 0.5) | 0) / 10;\r\n}\r\n\r\n/**\r\n * Represents an SVG path element.\r\n */\r\nexport class SvgPath {\r\n    constructor() {\r\n        /**\r\n         * This property holds the data string (path.d) of the SVG path.\r\n         * @type {string}\r\n         */\r\n        this.dataString = \"\";\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG path.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        let dataString = \"\";\r\n        for (let i = 0; i < points.length; i++) {\r\n            dataString += (i ? \"L\" : \"M\") + svgValue(points[i].x) + \" \" + svgValue(points[i].y);\r\n        }\r\n        this.dataString += dataString + \"Z\";\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG path.\r\n     * @param {import('../point').Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        const sweepFlag = counterClockwise ? 0 : 1,\r\n              svgRadius = svgValue(diameter / 2),\r\n              svgDiameter = svgValue(diameter),\r\n              svgArc = \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \";\r\n            \r\n        this.dataString += \r\n            \"M\" + svgValue(point.x) + \" \" + svgValue(point.y + diameter / 2) +\r\n            svgArc + svgDiameter + \",0\" + \r\n            svgArc + (-svgDiameter) + \",0\";\r\n    }\r\n}\r\n\r\n","\r\nvar SvgPath__prototype = SvgPath.prototype;","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SvgPath } from \"./svgPath\";\r\nimport { parseHex } from \"../../common/parseHex\";\r\n\r\n/**\r\n * @typedef {import(\"../point\").Point} Point\r\n * @typedef {import(\"../renderer\").Renderer} Renderer\r\n * @typedef {import(\"./svgElement\").SvgElement} SvgElement\r\n * @typedef {import(\"./svgWriter\").SvgWriter} SvgWriter\r\n */\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n * @implements {Renderer}\r\n */\r\nexport class SvgRenderer {\r\n    /**\r\n     * @param {SvgElement|SvgWriter} target \r\n     */\r\n    constructor(target) {\r\n        /**\r\n         * @type {SvgPath}\r\n         * @private\r\n         */\r\n        this._path;\r\n\r\n        /**\r\n         * @type {Object.<string,SvgPath>}\r\n         * @private\r\n         */\r\n        this._pathsByColor = { };\r\n\r\n        /**\r\n         * @type {SvgElement|SvgWriter}\r\n         * @private\r\n         */\r\n        this._target = target;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.iconSize = target.iconSize;\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground(fillColor) {\r\n        const match = /^(#......)(..)?/.exec(fillColor),\r\n              opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;\r\n        this._target.setBackground(match[1], opacity);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     */\r\n    beginShape(color) {\r\n        this._path = this._pathsByColor[color] || (this._pathsByColor[color] = new SvgPath());\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape.\r\n     */\r\n    endShape() { }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        this._path.addPolygon(points);\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        this._path.addCircle(point, diameter, counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() { \r\n        const pathsByColor = this._pathsByColor;\r\n        for (let color in pathsByColor) {\r\n            // hasOwnProperty cannot be shadowed in pathsByColor\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (pathsByColor.hasOwnProperty(color)) {\r\n                this._target.appendPath(color, pathsByColor[color].dataString);\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nvar SvgRenderer__prototype = SvgRenderer.prototype;","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nexport const SVG_CONSTANTS = {\r\n    XMLNS: \"http://www.w3.org/2000/svg\",\r\n    WIDTH: \"width\",\r\n    HEIGHT: \"height\",\r\n}","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SVG_CONSTANTS } from \"./constants\";\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n */\r\nexport class SvgWriter {\r\n    /**\r\n     * @param {number} iconSize - Icon width and height in pixels.\r\n     */\r\n    constructor(iconSize) {\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.iconSize = iconSize;\r\n\r\n        /**\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._s =\r\n            '<svg xmlns=\"' + SVG_CONSTANTS.XMLNS + '\" width=\"' + \r\n            iconSize + '\" height=\"' + iconSize + '\" viewBox=\"0 0 ' + \r\n            iconSize + ' ' + iconSize + '\">';\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground(fillColor, opacity) {\r\n        if (opacity) {\r\n            this._s += '<rect width=\"100%\" height=\"100%\" fill=\"' + \r\n                fillColor + '\" opacity=\"' + opacity.toFixed(2) + '\"/>';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes a path to the SVG string.\r\n     * @param {string} color Fill color on format #rrggbb.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    appendPath(color, dataString) {\r\n        this._s += '<path fill=\"' + color + '\" d=\"' + dataString + '\"/>';\r\n    }\r\n\r\n    /**\r\n     * Gets the rendered image as an SVG string.\r\n     */\r\n    toString() {\r\n        return this._s + \"</svg>\";\r\n    }\r\n}\r\n","\r\nvar SvgWriter__prototype = SvgWriter.prototype;","import { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { SvgRenderer } from \"../renderer/svg/svgRenderer\";\r\nimport { SvgWriter } from \"../renderer/svg/svgWriter\";\r\n\r\n/**\r\n * Draws an identicon as an SVG string.\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n * @returns {string} SVG string\r\n */\r\nexport function toSvg(hashOrValue, size, config) {\r\n    const writer = new SvgWriter(size);\r\n    iconGenerator(new SvgRenderer(writer), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue),\r\n        config);\r\n    return writer.toString();\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SVG_CONSTANTS } from \"./constants\";\r\n\r\n/**\r\n * Creates a new element and adds it to the specified parent.\r\n * @param {Element} parentNode\r\n * @param {string} name\r\n * @param {...(string|number)} keyValuePairs\r\n */\r\nfunction SvgElement_append(parentNode, name, ...keyValuePairs) {\r\n    const el = document.createElementNS(SVG_CONSTANTS.XMLNS, name);\r\n    \r\n    for (let i = 0; i + 1 < keyValuePairs.length; i += 2) {\r\n        el.setAttribute(\r\n            /** @type {string} */(keyValuePairs[i]),\r\n            /** @type {string} */(keyValuePairs[i + 1]),\r\n            );\r\n    }\r\n\r\n    parentNode.appendChild(el);\r\n}\r\n\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n */\r\nexport class SvgElement {\r\n    /**\r\n     * @param {Element} element - Target element\r\n     */\r\n    constructor(element) {\r\n        // Don't use the clientWidth and clientHeight properties on SVG elements\r\n        // since Firefox won't serve a proper value of these properties on SVG\r\n        // elements (https://bugzilla.mozilla.org/show_bug.cgi?id=874811)\r\n        // Instead use 100px as a hardcoded size (the svg viewBox will rescale \r\n        // the icon to the correct dimensions)\r\n        const iconSize = this.iconSize = Math.min(\r\n            (Number(element.getAttribute(SVG_CONSTANTS.WIDTH)) || 100),\r\n            (Number(element.getAttribute(SVG_CONSTANTS.HEIGHT)) || 100)\r\n            );\r\n        \r\n        /**\r\n         * @type {Element}\r\n         * @private\r\n         */\r\n        this._el = element;\r\n        \r\n        // Clear current SVG child elements\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n        \r\n        // Set viewBox attribute to ensure the svg scales nicely.\r\n        element.setAttribute(\"viewBox\", \"0 0 \" + iconSize + \" \" + iconSize);\r\n        element.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground(fillColor, opacity) {\r\n        if (opacity) {\r\n            SvgElement_append(this._el, \"rect\",\r\n                SVG_CONSTANTS.WIDTH, \"100%\",\r\n                SVG_CONSTANTS.HEIGHT, \"100%\",\r\n                \"fill\", fillColor,\r\n                \"opacity\", opacity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a path to the SVG element.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    appendPath(color, dataString) {\r\n        SvgElement_append(this._el, \"path\",\r\n            \"fill\", color,\r\n            \"d\", dataString);\r\n    }\r\n}\r\n","\r\nvar SvgElement__prototype = SvgElement.prototype;","/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { ATTRIBUTES, ICON_SELECTOR, documentQuerySelectorAll } from \"../common/dom\";\r\nimport { SvgRenderer } from \"../renderer/svg/svgRenderer\";\r\nimport { SvgElement } from \"../renderer/svg/svgElement\";\r\nimport { CanvasRenderer } from \"../renderer/canvas/canvasRenderer\";\r\nimport { ICON_TYPE_CANVAS, ICON_TYPE_SVG, getIdenticonType } from \"../common/dom\";\r\n\r\n\r\n/**\r\n * Updates all canvas elements with the `data-jdenticon-hash` or `data-jdenticon-value` attribute.\r\n */\r\nexport function updateAll() {\r\n    if (documentQuerySelectorAll) {\r\n        update(ICON_SELECTOR);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<canvas>` or `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function update(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType) {\r\n            return iconType == ICON_TYPE_SVG ? \r\n                new SvgRenderer(new SvgElement(el)) : \r\n                new CanvasRenderer(/** @type {HTMLCanvasElement} */(el).getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<canvas>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function updateCanvas(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_CANVAS) {\r\n            return new CanvasRenderer(/** @type {HTMLCanvasElement} */(el).getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function updateSvg(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_SVG) {\r\n            return new SvgRenderer(new SvgElement(el));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified canvas or svg elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number|undefined} config\r\n * @param {function(Element,number):import(\"../renderer/renderer\").Renderer} rendererFactory - Factory function for creating an icon renderer.\r\n */\r\nfunction renderDomElement(el, hashOrValue, config, rendererFactory) {\r\n    if (typeof el === \"string\") {\r\n        if (documentQuerySelectorAll) {\r\n            const elements = documentQuerySelectorAll(el);\r\n            for (let i = 0; i < elements.length; i++) {\r\n                renderDomElement(elements[i], hashOrValue, config, rendererFactory);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    \r\n    // Hash selection. The result from getValidHash or computeHash is \r\n    // accepted as a valid hash.\r\n    const hash = \r\n        // 1. Explicit valid hash\r\n        isValidHash(hashOrValue) ||\r\n        \r\n        // 2. Explicit value (`!= null` catches both null and undefined)\r\n        hashOrValue != null && computeHash(hashOrValue) ||\r\n        \r\n        // 3. `data-jdenticon-hash` attribute\r\n        isValidHash(el.getAttribute(ATTRIBUTES.HASH)) ||\r\n        \r\n        // 4. `data-jdenticon-value` attribute. \r\n        // We want to treat an empty attribute as an empty value. \r\n        // Some browsers return empty string even if the attribute \r\n        // is not specified, so use hasAttribute to determine if \r\n        // the attribute is specified.\r\n        el.hasAttribute(ATTRIBUTES.VALUE) && computeHash(el.getAttribute(ATTRIBUTES.VALUE));\r\n    \r\n    if (!hash) {\r\n        // No hash specified. Don't render an icon.\r\n        return;\r\n    }\r\n    \r\n    const renderer = rendererFactory(el, getIdenticonType(el));\r\n    if (renderer) {\r\n        // Draw icon\r\n        iconGenerator(renderer, hash, config);\r\n    }\r\n}\r\n","import { update } from \"./update\";\r\n\r\n/**\r\n * Renders an identicon for all matching supported elements.\r\n * \r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon. If not \r\n * specified the `data-jdenticon-hash` and `data-jdenticon-value` attributes of each element will be\r\n * evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any global\r\n * configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n * specified in place of a configuration object.\r\n */\r\nexport function jdenticonJqueryPlugin(hashOrValue, config) {\r\n    this[\"each\"](function (index, el) {\r\n        update(el, hashOrValue, config);\r\n    });\r\n    return this;\r\n}","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n// This file is compiled to dist/jdenticon.js and dist/jdenticon.min.js\r\n\r\nimport { CONFIG_PROPERTIES, defineConfigProperty } from \"./common/configuration\";\r\nimport { observer } from \"./common/observer\";\r\nimport { configure } from \"./apis/configure\";\r\nimport { drawIcon } from \"./apis/drawIcon\";\r\nimport { toSvg } from \"./apis/toSvg\";\r\nimport { update, updateAll } from \"./apis/update\";\r\nimport { jdenticonJqueryPlugin } from \"./apis/jquery\";\r\nimport { GLOBAL } from \"./common/global\";\r\n\r\nconst jdenticon = updateAll;\r\n\r\ndefineConfigProperty(jdenticon);\r\n\r\n// Export public API\r\njdenticon[\"configure\"] = configure;\r\njdenticon[\"drawIcon\"] = drawIcon;\r\njdenticon[\"toSvg\"] = toSvg;\r\njdenticon[\"update\"] = update;\r\njdenticon[\"updateCanvas\"] = update;\r\njdenticon[\"updateSvg\"] = update;\r\n\r\n/**\r\n * Specifies the version of the Jdenticon package in use.\r\n * @type {string}\r\n */\r\njdenticon[\"version\"] = \"#version#\";\r\n\r\n/**\r\n * Specifies which bundle of Jdenticon that is used.\r\n * @type {string}\r\n */\r\njdenticon[\"bundle\"] = \"browser-umd\";\r\n\r\n// Basic jQuery plugin\r\nconst jQuery = GLOBAL[\"jQuery\"];\r\nif (jQuery) {\r\n    jQuery[\"fn\"][\"jdenticon\"] = jdenticonJqueryPlugin;\r\n}\r\n\r\n/**\r\n * This function is called once upon page load.\r\n */\r\nfunction jdenticonStartup() {\r\n    const replaceMode = (\r\n        jdenticon[CONFIG_PROPERTIES.MODULE] ||\r\n        GLOBAL[CONFIG_PROPERTIES.GLOBAL] ||\r\n        { }\r\n    )[\"replaceMode\"];\r\n    \r\n    if (replaceMode != \"never\") {\r\n        updateAll();\r\n        \r\n        if (replaceMode == \"observe\") {\r\n            observer(update);\r\n        }\r\n    }\r\n}\r\n\r\n// Schedule to render all identicons on the page once it has been loaded.\r\nif (typeof setTimeout === \"function\") {\r\n    setTimeout(jdenticonStartup, 0);\r\n}\r\n\r\nmodule.exports = jdenticon;\r\n","\r\n});"]}